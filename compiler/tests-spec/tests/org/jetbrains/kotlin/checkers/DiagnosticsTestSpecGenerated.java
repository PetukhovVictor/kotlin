/*
 * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license
 * that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.checkers;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/tests-spec/testData/diagnostics")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class DiagnosticsTestSpecGenerated extends AbstractDiagnosticsTestSpec {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
    }

    public void testAllFilesPresentInDiagnostics() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true, "_helpers");
    }

    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Not_linked extends AbstractDiagnosticsTestSpec {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInNot_linked() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Contracts extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInContracts() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Analysis extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                public void testAllFilesPresentInAnalysis() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Common extends AbstractDiagnosticsTestSpec {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                    }

                    public void testAllFilesPresentInCommon() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common/neg")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Neg extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common/neg/1.kt");
                        }

                        public void testAllFilesPresentInNeg() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common/pos")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Pos extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common/pos/1.kt");
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common/pos/2.kt");
                        }

                        public void testAllFilesPresentInPos() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/common/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }
                }

                @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Controlflow extends AbstractDiagnosticsTestSpec {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                    }

                    public void testAllFilesPresentInControlflow() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Initialization extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        public void testAllFilesPresentInInitialization() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/neg")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Neg extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/neg/1.kt");
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/neg/2.kt");
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/neg/3.kt");
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/neg/4.kt");
                            }

                            @TestMetadata("5.kt")
                            public void test5() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/neg/5.kt");
                            }

                            public void testAllFilesPresentInNeg() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/pos")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Pos extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/pos/1.kt");
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/pos/2.kt");
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/pos/3.kt");
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/pos/4.kt");
                            }

                            public void testAllFilesPresentInPos() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/initialization/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Unreachable_code extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        public void testAllFilesPresentInUnreachable_code() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/neg")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Neg extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/neg/1.kt");
                            }

                            public void testAllFilesPresentInNeg() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Pos extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos/1.kt");
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos/2.kt");
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos/3.kt");
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos/4.kt");
                            }

                            @TestMetadata("5.kt")
                            public void test5() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos/5.kt");
                            }

                            @TestMetadata("6.kt")
                            public void test6() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos/6.kt");
                            }

                            public void testAllFilesPresentInPos() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/controlflow/unreachable_code/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }
                    }
                }

                @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Smartcasts extends AbstractDiagnosticsTestSpec {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                    }

                    public void testAllFilesPresentInSmartcasts() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Neg extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/1.kt");
                        }

                        @TestMetadata("10.kt")
                        public void test10() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/10.kt");
                        }

                        @TestMetadata("11.kt")
                        public void test11() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/11.kt");
                        }

                        @TestMetadata("12.kt")
                        public void test12() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/12.kt");
                        }

                        @TestMetadata("13.kt")
                        public void test13() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/13.kt");
                        }

                        @TestMetadata("14.kt")
                        public void test14() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/14.kt");
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/2.kt");
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/3.kt");
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/4.kt");
                        }

                        @TestMetadata("5.kt")
                        public void test5() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/5.kt");
                        }

                        @TestMetadata("6.kt")
                        public void test6() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/6.kt");
                        }

                        @TestMetadata("7.kt")
                        public void test7() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/7.kt");
                        }

                        @TestMetadata("8.kt")
                        public void test8() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/8.kt");
                        }

                        @TestMetadata("9.kt")
                        public void test9() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg/9.kt");
                        }

                        public void testAllFilesPresentInNeg() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Pos extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/1.kt");
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/2.kt");
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/3.kt");
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/4.kt");
                        }

                        @TestMetadata("5.kt")
                        public void test5() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/5.kt");
                        }

                        @TestMetadata("6.kt")
                        public void test6() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/6.kt");
                        }

                        @TestMetadata("7.kt")
                        public void test7() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/7.kt");
                        }

                        @TestMetadata("8.kt")
                        public void test8() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/8.kt");
                        }

                        @TestMetadata("9.kt")
                        public void test9() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos/9.kt");
                        }

                        public void testAllFilesPresentInPos() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/analysis/smartcasts/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }
                }
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Definitions extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                public void testAllFilesPresentInDefinitions() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Common extends AbstractDiagnosticsTestSpec {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                    }

                    public void testAllFilesPresentInCommon() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/neg")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Neg extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/neg/1.kt");
                        }

                        public void testAllFilesPresentInNeg() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/pos")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Pos extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/pos/1.kt");
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/pos/2.kt");
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/pos/3.kt");
                        }

                        public void testAllFilesPresentInPos() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/common/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }
                }

                @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Contract_builder extends AbstractDiagnosticsTestSpec {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                    }

                    public void testAllFilesPresentInContract_builder() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Neg extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg/1.kt");
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg/2.kt");
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg/3.kt");
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg/4.kt");
                        }

                        @TestMetadata("5.kt")
                        public void test5() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg/5.kt");
                        }

                        @TestMetadata("6.kt")
                        public void test6() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg/6.kt");
                        }

                        public void testAllFilesPresentInNeg() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Pos extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/1.kt");
                        }

                        @TestMetadata("10.kt")
                        public void test10() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/10.kt");
                        }

                        @TestMetadata("11.kt")
                        public void test11() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/11.kt");
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/2.kt");
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/3.kt");
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/4.kt");
                        }

                        @TestMetadata("5.kt")
                        public void test5() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/5.kt");
                        }

                        @TestMetadata("6.kt")
                        public void test6() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/6.kt");
                        }

                        @TestMetadata("7.kt")
                        public void test7() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/7.kt");
                        }

                        @TestMetadata("8.kt")
                        public void test8() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/8.kt");
                        }

                        @TestMetadata("9.kt")
                        public void test9() throws Exception {
                            runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos/9.kt");
                        }

                        public void testAllFilesPresentInPos() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/contract_builder/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }
                    }
                }

                @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects")
                @TestDataPath("$PROJECT_ROOT")
                @RunWith(JUnit3RunnerWithInners.class)
                public static class Effects extends AbstractDiagnosticsTestSpec {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                    }

                    public void testAllFilesPresentInEffects() throws Exception {
                        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class CallsInPlace extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        public void testAllFilesPresentInCallsInPlace() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/neg")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Neg extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/neg/1.kt");
                            }

                            public void testAllFilesPresentInNeg() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/pos")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Pos extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/pos/1.kt");
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/pos/2.kt");
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/pos/3.kt");
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/pos/4.kt");
                            }

                            public void testAllFilesPresentInPos() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/callsInPlace/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/common")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Common extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        public void testAllFilesPresentInCommon() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/common"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/common/pos")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Pos extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/common/pos/1.kt");
                            }

                            public void testAllFilesPresentInPos() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/common/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }
                    }

                    @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns")
                    @TestDataPath("$PROJECT_ROOT")
                    @RunWith(JUnit3RunnerWithInners.class)
                    public static class Returns extends AbstractDiagnosticsTestSpec {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                        }

                        public void testAllFilesPresentInReturns() throws Exception {
                            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/neg")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Neg extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/neg/1.kt");
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/neg/2.kt");
                            }

                            public void testAllFilesPresentInNeg() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }

                        @TestMetadata("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos")
                        @TestDataPath("$PROJECT_ROOT")
                        @RunWith(JUnit3RunnerWithInners.class)
                        public static class Pos extends AbstractDiagnosticsTestSpec {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos/1.kt");
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos/2.kt");
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos/3.kt");
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos/4.kt");
                            }

                            @TestMetadata("5.kt")
                            public void test5() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos/5.kt");
                            }

                            @TestMetadata("6.kt")
                            public void test6() throws Exception {
                                runTest("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos/6.kt");
                            }

                            public void testAllFilesPresentInPos() throws Exception {
                                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/not-linked/contracts/definitions/effects/returns/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                            }
                        }
                    }
                }
            }
        }
    }

    @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class S_16_30_when_expression extends AbstractDiagnosticsTestSpec {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInS_16_30_when_expression() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class P_11 extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInP_11() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Neg extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/1.1.kt");
                }

                @TestMetadata("1.2.kt")
                public void test1_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/1.2.kt");
                }

                @TestMetadata("3.1.kt")
                public void test3_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/3.1.kt");
                }

                @TestMetadata("6.1.kt")
                public void test6_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/6.1.kt");
                }

                @TestMetadata("7.1.kt")
                public void test7_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/7.1.kt");
                }

                @TestMetadata("8.1.kt")
                public void test8_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/8.1.kt");
                }

                @TestMetadata("8.2.kt")
                public void test8_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/8.2.kt");
                }

                @TestMetadata("8.3.kt")
                public void test8_3() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg/8.3.kt");
                }

                public void testAllFilesPresentInNeg() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Pos extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/1.1.kt");
                }

                @TestMetadata("1.2.kt")
                public void test1_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/1.2.kt");
                }

                @TestMetadata("1.3.kt")
                public void test1_3() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/1.3.kt");
                }

                @TestMetadata("3.1.kt")
                public void test3_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/3.1.kt");
                }

                @TestMetadata("6.1.kt")
                public void test6_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/6.1.kt");
                }

                @TestMetadata("7.1.kt")
                public void test7_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/7.1.kt");
                }

                @TestMetadata("8.1.kt")
                public void test8_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/8.1.kt");
                }

                @TestMetadata("8.2.kt")
                public void test8_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/8.2.kt");
                }

                @TestMetadata("8.3.kt")
                public void test8_3() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos/8.3.kt");
                }

                public void testAllFilesPresentInPos() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-11/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-2")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class P_2 extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInP_2() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-2"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-2/pos")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Pos extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("3.1.kt")
                public void test3_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-2/pos/3.1.kt");
                }

                @TestMetadata("3.2.kt")
                public void test3_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-2/pos/3.2.kt");
                }

                public void testAllFilesPresentInPos() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-2/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class P_3 extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInP_3() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/neg")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Neg extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/neg/1.1.kt");
                }

                @TestMetadata("2.1.kt")
                public void test2_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/neg/2.1.kt");
                }

                @TestMetadata("2.2.kt")
                public void test2_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/neg/2.2.kt");
                }

                public void testAllFilesPresentInNeg() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/pos")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Pos extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/pos/1.1.kt");
                }

                @TestMetadata("2.1.kt")
                public void test2_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/pos/2.1.kt");
                }

                @TestMetadata("2.2.kt")
                public void test2_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/pos/2.2.kt");
                }

                @TestMetadata("2.3.kt")
                public void test2_3() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/pos/2.3.kt");
                }

                public void testAllFilesPresentInPos() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-3/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class P_5 extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInP_5() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5/neg")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Neg extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5/neg/1.1.kt");
                }

                public void testAllFilesPresentInNeg() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5/pos")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Pos extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5/pos/1.1.kt");
                }

                public void testAllFilesPresentInPos() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-5/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class P_6 extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInP_6() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6/neg")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Neg extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6/neg/1.1.kt");
                }

                public void testAllFilesPresentInNeg() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6/pos")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Pos extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6/pos/1.1.kt");
                }

                public void testAllFilesPresentInPos() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-6/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class P_7 extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInP_7() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Neg extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg/1.1.kt");
                }

                @TestMetadata("1.2.kt")
                public void test1_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg/1.2.kt");
                }

                @TestMetadata("3.1.kt")
                public void test3_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg/3.1.kt");
                }

                @TestMetadata("3.2.kt")
                public void test3_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg/3.2.kt");
                }

                @TestMetadata("5.1.kt")
                public void test5_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg/5.1.kt");
                }

                @TestMetadata("5.2.kt")
                public void test5_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg/5.2.kt");
                }

                @TestMetadata("7.1.kt")
                public void test7_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg/7.1.kt");
                }

                public void testAllFilesPresentInNeg() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Pos extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/1.1.kt");
                }

                @TestMetadata("1.2.kt")
                public void test1_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/1.2.kt");
                }

                @TestMetadata("1.3.kt")
                public void test1_3() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/1.3.kt");
                }

                @TestMetadata("1.4.kt")
                public void test1_4() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/1.4.kt");
                }

                @TestMetadata("3.1.kt")
                public void test3_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/3.1.kt");
                }

                @TestMetadata("3.2.kt")
                public void test3_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/3.2.kt");
                }

                @TestMetadata("5.1.kt")
                public void test5_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/5.1.kt");
                }

                @TestMetadata("5.2.kt")
                public void test5_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/5.2.kt");
                }

                @TestMetadata("7.1.kt")
                public void test7_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos/7.1.kt");
                }

                public void testAllFilesPresentInPos() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-7/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }
        }

        @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class P_9 extends AbstractDiagnosticsTestSpec {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInP_9() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/neg")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Neg extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/neg/1.1.kt");
                }

                @TestMetadata("1.2.kt")
                public void test1_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/neg/1.2.kt");
                }

                @TestMetadata("1.3.kt")
                public void test1_3() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/neg/1.3.kt");
                }

                @TestMetadata("1.4.kt")
                public void test1_4() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/neg/1.4.kt");
                }

                public void testAllFilesPresentInNeg() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/neg"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }

            @TestMetadata("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/pos")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class Pos extends AbstractDiagnosticsTestSpec {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                @TestMetadata("1.1.kt")
                public void test1_1() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/pos/1.1.kt");
                }

                @TestMetadata("1.2.kt")
                public void test1_2() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/pos/1.2.kt");
                }

                @TestMetadata("1.3.kt")
                public void test1_3() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/pos/1.3.kt");
                }

                @TestMetadata("1.4.kt")
                public void test1_4() throws Exception {
                    runTest("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/pos/1.4.kt");
                }

                public void testAllFilesPresentInPos() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/tests-spec/testData/diagnostics/s-16.30_when-expression/p-9/pos"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }
            }
        }
    }
}
