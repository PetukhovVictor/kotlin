KtFile: 2:3-pos.kt
  PACKAGE_DIRECTIVE
    <empty list>
  IMPORT_LIST
    <empty list>
  PsiComment(BLOCK_COMMENT)('/*\n KOTLIN SPEC TEST (POSITIVE)\n\n SECTION 16.30: When expression\n PARAGRAPH 2\n SENTENCE 3: When expression has two different forms: with bound value and without it.\n */')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('withBoundValue')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      VALUE_PARAMETER
        PsiElement(IDENTIFIER)('value')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        TYPE_REFERENCE
          NULLABLE_TYPE
            USER_TYPE
              REFERENCE_EXPRESSION
                PsiElement(IDENTIFIER)('Int')
            PsiElement(QUEST)('?')
      PsiElement(RPAR)(')')
    PsiElement(COLON)(':')
    PsiWhiteSpace(' ')
    TYPE_REFERENCE
      USER_TYPE
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('Int')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      BINARY_EXPRESSION
        WHEN
          PsiElement(when)('when')
          PsiWhiteSpace(' ')
          PsiElement(LPAR)('(')
          PsiErrorElement:Expecting an expression
            <empty list>
        OPERATION_REFERENCE
          PsiElement(LT)('<')
        PREFIX_EXPRESSION
          OPERATION_REFERENCE
            PsiElement(EXCL)('!')
          REFERENCE_EXPRESSION
            PsiElement(IDENTIFIER)('UNUSED_EXPRESSION')
      PsiErrorElement:Unexpected tokens (use ';' to separate expressions on the same line)
        PsiElement(EXCL)('!')
        PsiElement(GT)('>')
        PsiElement(IDENTIFIER)('value')
        PsiElement(LT)('<')
        PsiElement(EXCL)('!')
        PsiElement(GT)('>')
        PsiElement(RPAR)(')')
      PsiWhiteSpace(' ')
      LAMBDA_EXPRESSION
        FUNCTION_LITERAL
          PsiElement(LBRACE)('{')
          BLOCK
            <empty list>
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        PREFIX_EXPRESSION
          OPERATION_REFERENCE
            PsiElement(MINUS)('-')
          INTEGER_CONSTANT
            PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n\n')
  FUN
    PsiElement(fun)('fun')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('withoutBoundValue')
    VALUE_PARAMETER_LIST
      PsiElement(LPAR)('(')
      PsiElement(RPAR)(')')
    PsiElement(COLON)(':')
    PsiWhiteSpace(' ')
    TYPE_REFERENCE
      USER_TYPE
        REFERENCE_EXPRESSION
          PsiElement(IDENTIFIER)('Int')
    PsiWhiteSpace(' ')
    BLOCK
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n    ')
      WHEN
        PsiElement(when)('when')
        PsiWhiteSpace(' ')
        PsiElement(LBRACE)('{')
        PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n    ')
      RETURN
        PsiElement(return)('return')
        PsiWhiteSpace(' ')
        PREFIX_EXPRESSION
          OPERATION_REFERENCE
            PsiElement(MINUS)('-')
          INTEGER_CONSTANT
            PsiElement(INTEGER_LITERAL)('1')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')